#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('crawlgiavang:server');
var http = require('http');
const mongoose = require('mongoose');
const crawler = require('../services/crawler');
const duDoanTheoGio = require('../services/jobinhour');
const { CronJob } = require('cron');
const DuDoanGiaVang = require('../models/dudoangiavang');
const hass = require('../services/hasspass');

const passwd = 'u1h1u1s1o1a1c';

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
// add mongo


let URL = 'mongodb+srv://anhtuanit:' + hass(passwd) + '@mongodbproduct.ov1li.azure.mongodb.net/giavang?retryWrites=true&w=majority';
mongoose.connect(URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useCreateIndex: true
});
mongoose.connection.once('open', () => {
    crawler();
    duDoanTheoGio(1)
        .then(async(res) => {
            await DuDoanGiaVang.deleteMany({});
            await res.save();
        })
        .catch((err) => console.log(err));
    let job = new CronJob('* * 1 * * *', () => {
        crawler();
        duDoanTheoGio(1)
            .then(async(res) => {
                await DuDoanGiaVang.deleteMany({});
                await res.save();
            })
            .catch((err) => console.log(err));
    }, null, true, 'Asia/Ho_Chi_Minh');
    job.start();
});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}